// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/add-user": {
            "post": {
                "description": "Takes a username, scrapes public data from LeetCode, and stores it in Postgres.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a user by fetching data from LeetCode and persisting it",
                "parameters": [
                    {
                        "description": "Create user payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_leetcode_ranking_internal_dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user object",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_leetcode_ranking_db_users_storage.UserDatum"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not available",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/get-users": {
            "get": {
                "description": "Returns users filtered by 2-letter country code, ordered by total_problems_solved DESC, then total_submissions ASC, then username ASC.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users by country (paginated, ranked)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ISO-3166-1 alpha-2 country code (e.g., US, CN, SG)",
                        "name": "country",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (1-based)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page size (1â€“100)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users by country",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_leetcode_ranking_internal_dto.GetUsersByCountryResponse"
                        }
                    },
                    "400": {
                        "description": "Validation message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_ruziba3vich_leetcode_ranking_db_users_storage.UserDatum": {
            "type": "object",
            "properties": {
                "country_code": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "country_name": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "real_name": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "total_problems_solved": {
                    "type": "integer"
                },
                "total_submissions": {
                    "type": "integer"
                },
                "typename": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_avatar": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "user_slug": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_leetcode_ranking_internal_dto.CreateUserRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_leetcode_ranking_internal_dto.GetUsersByCountryResponse": {
            "type": "object",
            "required": [
                "limit",
                "page"
            ],
            "properties": {
                "limit": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "total_count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ruziba3vich_leetcode_ranking_db_users_storage.UserDatum"
                    }
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Leetcoders API",
	Description:      "Leetcoders API Documentation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
