// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package users_storage

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user_data (
  username, user_slug, user_avatar, country_code, country_name, real_name, typename,
  total_problems_solved, total_submissions
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, username, user_slug, user_avatar, country_code, country_name, real_name, typename, total_problems_solved, total_submissions, created_at, updated_at
`

type CreateUserParams struct {
	Username            string         `json:"username"`
	UserSlug            string         `json:"user_slug"`
	UserAvatar          sql.NullString `json:"user_avatar"`
	CountryCode         sql.NullString `json:"country_code"`
	CountryName         sql.NullString `json:"country_name"`
	RealName            sql.NullString `json:"real_name"`
	Typename            sql.NullString `json:"typename"`
	TotalProblemsSolved int32          `json:"total_problems_solved"`
	TotalSubmissions    int32          `json:"total_submissions"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserDatum, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.UserSlug,
		arg.UserAvatar,
		arg.CountryCode,
		arg.CountryName,
		arg.RealName,
		arg.Typename,
		arg.TotalProblemsSolved,
		arg.TotalSubmissions,
	)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UserSlug,
		&i.UserAvatar,
		&i.CountryCode,
		&i.CountryName,
		&i.RealName,
		&i.Typename,
		&i.TotalProblemsSolved,
		&i.TotalSubmissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM user_data
WHERE username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const getAllUsersCountByCountry = `-- name: GetAllUsersCountByCountry :one
SELECT COUNT(*) FROM user_data
WHERE country_code = $1
`

func (q *Queries) GetAllUsersCountByCountry(ctx context.Context, countryCode sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllUsersCountByCountry, countryCode)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, user_slug, user_avatar, country_code, country_name, real_name, typename, total_problems_solved, total_submissions, created_at, updated_at FROM user_data
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (UserDatum, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UserSlug,
		&i.UserAvatar,
		&i.CountryCode,
		&i.CountryName,
		&i.RealName,
		&i.Typename,
		&i.TotalProblemsSolved,
		&i.TotalSubmissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersByCountry = `-- name: GetUsersByCountry :many
SELECT id, username, user_slug, user_avatar, country_code, country_name, real_name, typename, total_problems_solved, total_submissions, created_at, updated_at FROM user_data
WHERE country_code = $1
ORDER BY 
  total_problems_solved DESC,
  total_submissions ASC,
  username ASC
LIMIT $2 OFFSET $3
`

type GetUsersByCountryParams struct {
	CountryCode sql.NullString `json:"country_code"`
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
}

func (q *Queries) GetUsersByCountry(ctx context.Context, arg GetUsersByCountryParams) ([]UserDatum, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByCountry, arg.CountryCode, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserDatum{}
	for rows.Next() {
		var i UserDatum
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.UserSlug,
			&i.UserAvatar,
			&i.CountryCode,
			&i.CountryName,
			&i.RealName,
			&i.Typename,
			&i.TotalProblemsSolved,
			&i.TotalSubmissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, user_slug, user_avatar, country_code, country_name, real_name, typename, total_problems_solved, total_submissions, created_at, updated_at FROM user_data
ORDER BY total_problems_solved DESC, username ASC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]UserDatum, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserDatum{}
	for rows.Next() {
		var i UserDatum
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.UserSlug,
			&i.UserAvatar,
			&i.CountryCode,
			&i.CountryName,
			&i.RealName,
			&i.Typename,
			&i.TotalProblemsSolved,
			&i.TotalSubmissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserByUsername = `-- name: UpdateUserByUsername :one
UPDATE user_data
SET
  user_slug = COALESCE($2, user_slug),
  user_avatar = COALESCE($3, user_avatar),
  country_code = COALESCE($4, country_code),
  country_name = COALESCE($5, country_name),
  real_name = COALESCE($6, real_name),
  typename = COALESCE($7, typename),
  total_problems_solved = COALESCE($8, total_problems_solved),
  total_submissions = COALESCE($9, total_submissions)
WHERE username = $1
RETURNING id, username, user_slug, user_avatar, country_code, country_name, real_name, typename, total_problems_solved, total_submissions, created_at, updated_at
`

type UpdateUserByUsernameParams struct {
	Username            string         `json:"username"`
	UserSlug            string         `json:"user_slug"`
	UserAvatar          sql.NullString `json:"user_avatar"`
	CountryCode         sql.NullString `json:"country_code"`
	CountryName         sql.NullString `json:"country_name"`
	RealName            sql.NullString `json:"real_name"`
	Typename            sql.NullString `json:"typename"`
	TotalProblemsSolved int32          `json:"total_problems_solved"`
	TotalSubmissions    int32          `json:"total_submissions"`
}

func (q *Queries) UpdateUserByUsername(ctx context.Context, arg UpdateUserByUsernameParams) (UserDatum, error) {
	row := q.db.QueryRowContext(ctx, updateUserByUsername,
		arg.Username,
		arg.UserSlug,
		arg.UserAvatar,
		arg.CountryCode,
		arg.CountryName,
		arg.RealName,
		arg.Typename,
		arg.TotalProblemsSolved,
		arg.TotalSubmissions,
	)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UserSlug,
		&i.UserAvatar,
		&i.CountryCode,
		&i.CountryName,
		&i.RealName,
		&i.Typename,
		&i.TotalProblemsSolved,
		&i.TotalSubmissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO user_data (
  username, user_slug, user_avatar, country_code, country_name, real_name, typename,
  total_problems_solved, total_submissions
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
ON CONFLICT (username) DO UPDATE
SET
  user_slug = EXCLUDED.user_slug,
  user_avatar = EXCLUDED.user_avatar,
  country_code = EXCLUDED.country_code,
  country_name = EXCLUDED.country_name,
  real_name = EXCLUDED.real_name,
  typename = EXCLUDED.typename,
  total_problems_solved = EXCLUDED.total_problems_solved,
  total_submissions = EXCLUDED.total_submissions
RETURNING id, username, user_slug, user_avatar, country_code, country_name, real_name, typename, total_problems_solved, total_submissions, created_at, updated_at
`

type UpsertUserParams struct {
	Username            string         `json:"username"`
	UserSlug            string         `json:"user_slug"`
	UserAvatar          sql.NullString `json:"user_avatar"`
	CountryCode         sql.NullString `json:"country_code"`
	CountryName         sql.NullString `json:"country_name"`
	RealName            sql.NullString `json:"real_name"`
	Typename            sql.NullString `json:"typename"`
	TotalProblemsSolved int32          `json:"total_problems_solved"`
	TotalSubmissions    int32          `json:"total_submissions"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (UserDatum, error) {
	row := q.db.QueryRowContext(ctx, upsertUser,
		arg.Username,
		arg.UserSlug,
		arg.UserAvatar,
		arg.CountryCode,
		arg.CountryName,
		arg.RealName,
		arg.Typename,
		arg.TotalProblemsSolved,
		arg.TotalSubmissions,
	)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UserSlug,
		&i.UserAvatar,
		&i.CountryCode,
		&i.CountryName,
		&i.RealName,
		&i.Typename,
		&i.TotalProblemsSolved,
		&i.TotalSubmissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
